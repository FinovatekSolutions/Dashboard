datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

model Todo {
  id          String   @id @default(uuid())
  /// @zod.string.min(3, { message: "Must be at least 3 characters." }).max(20, { message: "Must be at most 20 characters" })
  title       String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  // DO NOT EDIT BELOW, USED FOR AUTHENTICATION  
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // DO NOT EDIT ABOVE, USED FOR AUTHENTICATION

  reviews Review[]
}

model Client {
  id String @id @default(cuid())

  /// @zod.string.min(3, { message: "Must be at least 3 characters." }).max(100, { message: "Must be at most 100 characters" })
  firstName String

  /// @zod.string.min(3, { message: "Must be at least 3 characters." }).max(100, { message: "Must be at most 100 characters" })
  lastName String

  /// @zod.string.min(3, { message: "Must be at least 3 characters." }).max(100, { message: "Must be at most 100 characters" })
  company String

  /// @zod.string.email({ message: 'Invalid email address' })
  email String

  /// @zod.string.regex(/^\d{3}-\d{3}-\d{4}$/, { message: 'Invalid phone number format. Required format: 787-555-4444' })
  phone String

  /// @zod.string.min(1, { message: "Address cannot be empty." })
  address String

  /// @zod.string.min(1, { message: "City cannot be empty." })
  city String

  /// @zod.string.min(2, { message: "State must be at least 2 characters." }).max(100, { message: "State must be at most 100 characters" })
  state String

  /// @zod.string.regex(/^\d{5}(-\d{4})?$/, { message: 'Invalid ZIP code format. Required format: 12345 or 12345-6789' })
  zip String

  /// @zod.string.min(2, { message: "Country must be at least 2 characters." }).max(100, { message: "Country must be at most 100 characters" })
  country String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews Review[]
}

enum ReviewStatus {
  Pending
  Done
}

model Review {
  id String @id @default(cuid())

  /// @zod.string.min(1, { message: "Name cannot be empty." })
  name String

  status ReviewStatus @default(Pending)

  /// @zod.date
  startDate DateTime

  /// @zod.date
  endDate DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id])

  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions   Transaction[]
  bankStatements BankStatement[]
}

model Transaction {
  id String @id @default(cuid())

  /// @zod.date
  date DateTime

  /// @zod.string.min(1, { message: "Description cannot be empty." })
  description String

  /// @zod.number
  amount Float

  reviewId String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BankType {
  id String @id @default(cuid())

  /// @zod.string.min(1, { message: "Name cannot be empty." })
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bankStatements BankStatement[]
}

model BankStatement {
  id String @id @default(cuid())

  /// @zod.string.min(1, { message: "Name cannot be empty." })
  name String

  file Bytes // This field will store the binary data of the file

  reviewId String
  review   Review @relation(fields: [reviewId], references: [id])

  bankTypeId String
  bankType   BankType @relation(fields: [bankTypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @default(cuid())

  /// @zod.string.min(1, { message: "Name cannot be empty." })
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[]
}

enum Role {
  USER
  ADMIN
}

model Permission {
  id String @id @default(cuid())

  /// @zod.string.min(3, { message: "Must be at least 3 characters." }).max(100, { message: "Must be at most 100 characters" })
  firstName String

  /// @zod.string.min(3, { message: "Must be at least 3 characters." }).max(100, { message: "Must be at most 100 characters" })
  lastName String

  /// @zod.string.email({ message: 'Invalid email address' })
  email String @unique

  role Role @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Model {
  id String @id @default(cuid())

  /// @zod.string.min(3, { message: "Must be at least 3 characters." }).max(100, { message: "Must be at most 100 characters" })
  firstName String

  /// @zod.string.min(3, { message: "Must be at least 3 characters." }).max(100, { message: "Must be at most 100 characters" })
  lastName String

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt
}

// DO NOT EDIT BELOW, USED FOR AUTHENTICATION
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
