import type { UseQueryOptions, UseQueryResult } from '@tanstack/react-query';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import type { Prisma, {{pascalCase singular}} } from '@prisma/client';

import {
  getAll{{pascalCase plural}},
  get{{pascalCase singular}}ById,
  create{{pascalCase singular}},
  update{{pascalCase singular}},
  remove{{pascalCase singular}},
} from '@/lib/actions/{{camelCase singular}}';
import { onSuccessCallback, onErrorCallback } from '@/lib/utils/types';

export const getAll{{pascalCase plural}}QueryKey = 'getAll{{pascalCase plural}}';
export const get{{pascalCase singular}}ByIdQueryKey = 'get{{pascalCase singular}}ById';

// Queries:
export function useGetAll{{pascalCase plural}}(): UseQueryResult<{{pascalCase singular}}[]> {
  return useQuery<{{pascalCase singular}}[]>({
    queryKey: [getAll{{pascalCase plural}}QueryKey],
    queryFn: () => getAll{{pascalCase plural}}(),
  } satisfies UseQueryOptions<{{pascalCase singular}}[]>);
}

export function useGet{{pascalCase singular}}ById(id: string): UseQueryResult<{{pascalCase singular}} | null> {
  return useQuery<{{pascalCase singular}} | null>({
    queryKey: [get{{pascalCase singular}}ByIdQueryKey, id],
    queryFn: () => get{{pascalCase singular}}ById(id),
    enabled: !!id,
  } satisfies UseQueryOptions<{{pascalCase singular}} | null>);
}

// Mutations:
export function useCreate{{pascalCase singular}}(onSuccessCb?: onSuccessCallback, onErrorCb?: onErrorCallback) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (input: Prisma.{{pascalCase singular}}CreateInput) => create{{pascalCase singular}}(input),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: [getAll{{pascalCase plural}}QueryKey] });
      if (onSuccessCb) {
        onSuccessCb(data);
      }
    },
    onError: (error) => {
      if (onErrorCb) {
        onErrorCb(error);
      }
    },
  });
}

export function useUpdate{{pascalCase singular}}(onSuccessCb?: onSuccessCallback, onErrorCb?: onErrorCallback) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (input: Prisma.{{pascalCase singular}}UpdateInput) => update{{pascalCase singular}}(input),
    onMutate: async (updated{{pascalCase singular}}) => {
      await queryClient.cancelQueries({ queryKey: [getAll{{pascalCase plural}}QueryKey] });
      await queryClient.cancelQueries({ queryKey: [get{{pascalCase singular}}ByIdQueryKey, updated{{pascalCase singular}}.id] });

      const previous{{pascalCase singular}}ById = queryClient.getQueryData<{{pascalCase singular}} | null>([
        get{{pascalCase singular}}ByIdQueryKey,
        updated{{pascalCase singular}}.id,
      ]);
      const previous{{pascalCase plural}} = queryClient.getQueryData<{{pascalCase singular}}[]>([getAll{{pascalCase plural}}QueryKey]);

      if (previous{{pascalCase singular}}ById) {
        queryClient.setQueryData([get{{pascalCase singular}}ByIdQueryKey, updated{{pascalCase singular}}.id], {
          ...previous{{pascalCase singular}}ById,
          ...updated{{pascalCase singular}},
        });
      }

      if (previous{{pascalCase plural}}) {
        const updated{{pascalCase plural}} = previous{{pascalCase plural}}.map(({{singular}}) =>
          {{singular}}.id === updated{{pascalCase singular}}.id ? { ...{{singular}}, ...updated{{pascalCase singular}} } : {{singular}}
        );
        queryClient.setQueryData([getAll{{pascalCase plural}}QueryKey], updated{{pascalCase plural}});
      }

      return { previous{{pascalCase singular}}ById, previous{{pascalCase plural}} };
    },
    onError: (error, updated{{pascalCase singular}}, context) => {
      if (context?.previous{{pascalCase singular}}ById) {
        queryClient.setQueryData(
          [get{{pascalCase singular}}ByIdQueryKey, updated{{pascalCase singular}}.id],
          context.previous{{pascalCase singular}}ById
        );
      }
      if (context?.previous{{pascalCase plural}}) {
        queryClient.setQueryData([getAll{{pascalCase plural}}QueryKey], context.previous{{pascalCase plural}});
      }
      if (onErrorCb) {
        onErrorCb(error);
      }
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: [getAll{{pascalCase plural}}QueryKey] });
      queryClient.invalidateQueries({ queryKey: [get{{pascalCase singular}}ByIdQueryKey, data.id] });
      if (onSuccessCb) {
        onSuccessCb(data);
      }
    },
  });
}

export function useRemove{{pascalCase singular}}(onSuccessCb?: onSuccessCallback, onErrorCb?: onErrorCallback) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (id: string) => remove{{pascalCase singular}}(id),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: [getAll{{pascalCase plural}}QueryKey] });
      queryClient.invalidateQueries({ queryKey: [get{{pascalCase singular}}ByIdQueryKey, data.id] });
      if (onSuccessCb) {
        onSuccessCb();
      }
    },
    onError: (error) => {
      if (onErrorCb) {
        onErrorCb(error);
      }
    },
  });
}
